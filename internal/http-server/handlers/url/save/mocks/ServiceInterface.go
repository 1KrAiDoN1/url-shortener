// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// DeleteURl provides a mock function with given fields: ctx, alias
func (_m *ServiceInterface) DeleteURl(ctx context.Context, alias string) error {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for DeleteURl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: ctx, alias
func (_m *ServiceInterface) GetURL(ctx context.Context, alias string) (string, error) {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURL provides a mock function with given fields: ctx, urlToSave, alias
func (_m *ServiceInterface) SaveURL(ctx context.Context, urlToSave string, alias string) (int64, error) {
	ret := _m.Called(ctx, urlToSave, alias)

	if len(ret) == 0 {
		panic("no return value specified for SaveURL")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, urlToSave, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, urlToSave, alias)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, urlToSave, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLExists provides a mock function with given fields: ctx, url
func (_m *ServiceInterface) URLExists(ctx context.Context, url string) (bool, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for URLExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
